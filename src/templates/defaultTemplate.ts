import { Issue, Milestone } from '../types';

// Generate progress bar
function generateProgressBar(completed: number, total: number, width: number = 20): string {
  const progress = Math.round((completed / total) * width);
  const filled = 'â–ˆ'.repeat(progress);
  const empty = 'â–‘'.repeat(width - progress);
  const percentage = Math.round((completed / total) * 100);
  return `${filled}${empty} ${percentage}%`;
}

// Format date to locale string
function formatDate(date: string | null): string {
  if (!date) return 'No due date';
  return new Date(date).toLocaleDateString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric'
  });
}

// Generate category section
function generateCategorySection(
  issues: Issue[],
  category: string
): string {
  const categoryIssues = issues.filter(issue =>
    issue.labels.some(label => label.name.toLowerCase() === category.toLowerCase())
  );

  if (categoryIssues.length === 0) return '';

  const issuesList = categoryIssues
    .map(issue => {
      const checkbox = issue.state === 'closed' ? '[x]' : '[ ]';
      const assigneeText = issue.assignee ? ` (@${issue.assignee.login})` : '';
      const labels = issue.labels
        .filter(label => label.name.toLowerCase() !== category.toLowerCase())
        .map(label => `\`${label.name}\``)
        .join(' ');
      const labelsText = labels ? ` ${labels}` : '';
      return `- ${checkbox} #${issue.number} ${issue.title}${assigneeText}${labelsText}`;
    })
    .join('\n');

  return `### ${category} (${categoryIssues.length})
${issuesList}
`;
}

// Generate uncategorized section
function generateUncategorizedSection(
  issues: Issue[],
  categories: string[]
): string {
  const uncategorizedIssues = issues.filter(
    issue => !issue.labels.some(label =>
      categories.some(category =>
        category.toLowerCase() === label.name.toLowerCase()
      )
    )
  );

  if (uncategorizedIssues.length === 0) return '';

  const issuesList = uncategorizedIssues
    .map(issue => {
      const checkbox = issue.state === 'closed' ? '[x]' : '[ ]';
      const assigneeText = issue.assignee ? ` (@${issue.assignee.login})` : '';
      const labels = issue.labels
        .map(label => `\`${label.name}\``)
        .join(' ');
      const labelsText = labels ? ` ${labels}` : '';
      return `- ${checkbox} #${issue.number} ${issue.title}${assigneeText}${labelsText}`;
    })
    .join('\n');

  return `### Uncategorized (${uncategorizedIssues.length})
${issuesList}
`;
}

export function generatePlanningContent(
  milestone: Milestone,
  issues: Issue[],
  categories: string[]
): string {
  const totalIssues = issues.length;
  const completedIssues = issues.filter(issue => issue.state === 'closed').length;
  const inProgressIssues = totalIssues - completedIssues;

  const progressBar = generateProgressBar(completedIssues, totalIssues);
  const dueDate = formatDate(milestone.due_on);

  let content = `# ${milestone.title} Planning

## Overview
- Progress: ${progressBar}
- Total Issues: ${totalIssues}
  - âœ… Completed: ${completedIssues}
  - ðŸš§ In Progress: ${inProgressIssues}
- Due Date: ${dueDate}

## Description
${milestone.description || 'No description provided.'}

## Tasks by Category
`;

  // Generate sections for each category
  categories.forEach(category => {
    const section = generateCategorySection(issues, category);
    if (section) {
      content += '\n' + section;
    }
  });

  // Generate uncategorized section
  const uncategorizedSection = generateUncategorizedSection(issues, categories);
  if (uncategorizedSection) {
    content += '\n' + uncategorizedSection;
  }

  // Add footer
  content += `\n---
> ðŸ¤– Auto-generated by [Auto Milestone Summary Action](https://github.com/elliotxx/auto-milestone-summary-action)
> Last Updated: ${new Date().toLocaleString('en-US', {
    year: 'numeric',
    month: 'long',
    day: 'numeric',
    hour: '2-digit',
    minute: '2-digit',
    timeZoneName: 'short'
  })}`;

  return content;
}
